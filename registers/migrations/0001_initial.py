# Generated by Django 2.0.3 on 2018-03-27 05:52

import datetime
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import registers.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tracking', '0001_initial'),
        ('organisation', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Backup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('operating_system', models.CharField(max_length=120)),
                ('role', models.PositiveSmallIntegerField(choices=[(0, 'Generic Server'), (1, 'Domain Controller'), (2, 'Database Server'), (3, 'Application Host'), (4, 'Management Server'), (5, 'Site Server'), (6, 'File Server'), (7, 'Print Server'), (8, 'Block Storage Server'), (9, 'Email Server'), (10, 'Network Device')], default=0)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Production'), (1, 'Pre-Production'), (2, 'Legacy'), (3, 'Decommissioned')], default=0)),
                ('database_backup', models.CharField(blank=True, help_text='URL to Database backup/restore/logs info', max_length=2048, null=True)),
                ('database_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('filesystem_backup', models.CharField(blank=True, help_text='URL to Filesystem backup/restore/logs info', max_length=2048, null=True)),
                ('filesystem_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('appdata_backup', models.CharField(blank=True, help_text='URL to Application Data backup/restore/logs info', max_length=2048, null=True)),
                ('appdata_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('appconfig_backup', models.CharField(blank=True, help_text='URL to Config for App/Server', max_length=2048, null=True)),
                ('appconfig_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('os_backup', models.CharField(blank=True, help_text='URL to Build Documentation', max_length=2048, null=True)),
                ('os_schedule', models.PositiveSmallIntegerField(choices=[(0, 'Manual'), (1, 'Point in time, 7 day retention'), (2, 'Daily, 7 day retention'), (3, 'Daily, 30 day retention'), (4, 'Weekly, 1 month retention')], default=0)),
                ('last_tested', models.DateField(blank=True, help_text='Last tested date', null=True)),
                ('test_schedule', models.PositiveSmallIntegerField(default=12, help_text='Test Schedule in Months, 0 for never')),
                ('comment', models.TextField(blank=True)),
                ('computer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='tracking.Computer')),
                ('cost_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.CostCentre')),
                ('org_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.OrgUnit')),
            ],
            options={
                'ordering': ('computer__hostname',),
            },
        ),
        migrations.CreateModel(
            name='BusinessFunction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='BusinessProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('criticality', models.PositiveIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'Moderate'), (3, 'Low')], help_text='How critical is the process?', null=True)),
                ('functions', models.ManyToManyField(to='registers.BusinessFunction')),
            ],
            options={
                'verbose_name_plural': 'business processes',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='BusinessService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(help_text='Service number', unique=True)),
                ('name', models.CharField(max_length=256, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('number',),
            },
        ),
        migrations.CreateModel(
            name='ITSystem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('name', models.CharField(max_length=128, unique=True)),
                ('system_id', models.CharField(max_length=16, unique=True, verbose_name='system ID')),
                ('acronym', models.CharField(blank=True, max_length=16, null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'Production'), (1, 'Development'), (2, 'Production (Legacy)'), (3, 'Decommissioned'), (4, 'Unknown')], default=4)),
                ('status_display', models.CharField(editable=False, max_length=128, null=True)),
                ('description', models.TextField(blank=True)),
                ('link', models.CharField(blank=True, help_text='URL to web application', max_length=2048, null=True)),
                ('documentation', models.URLField(blank=True, help_text='URL to end-user documentation', max_length=2048, null=True)),
                ('technical_documentation', models.URLField(blank=True, help_text='URL to technical documentation', max_length=2048, null=True)),
                ('status_html', models.URLField(blank=True, help_text='URL to status/uptime info', max_length=2048, null=True)),
                ('authentication', models.PositiveSmallIntegerField(choices=[(1, 'Domain/application Credentials'), (2, 'Single Sign On'), (3, 'Externally Managed')], default=1, help_text='The method by which users authenticate themselve to the system.')),
                ('authentication_display', models.CharField(editable=False, max_length=128, null=True)),
                ('access', models.PositiveSmallIntegerField(choices=[(1, 'Public Internet'), (2, 'Authenticated Extranet'), (3, 'Corporate Network'), (4, 'Local System (Networked)'), (5, 'Local System (Standalone)')], default=3, help_text='The network upon which this system is accessible.')),
                ('access_display', models.CharField(editable=False, max_length=128, null=True)),
                ('request_access', models.TextField(blank=True, help_text='Procedure to request access to this application')),
                ('criticality', models.PositiveIntegerField(blank=True, choices=[(1, 'Critical'), (2, 'Moderate'), (3, 'Low')], help_text='How critical is this system to P&W core functions?', null=True)),
                ('criticality_display', models.CharField(editable=False, max_length=128, null=True)),
                ('availability', models.PositiveIntegerField(blank=True, choices=[(1, '24 hours a day, 7 days a week, 365 days a year'), (2, 'Department core business hours')], help_text='Expected availability for this IT System', null=True)),
                ('availability_display', models.CharField(editable=False, max_length=128, null=True)),
                ('schema_url', models.URLField(blank=True, help_text='URL to schema diagram', max_length=2048, null=True)),
                ('system_reqs', models.TextField(blank=True, help_text='A written description of the requirements to use the system (e.g. web browser version)')),
                ('system_type', models.PositiveSmallIntegerField(blank=True, choices=[(1, 'System - Web application'), (2, 'System - Client application'), (3, 'System - Mobile application'), (5, 'System - Externally hosted application'), (4, 'Service'), (6, 'Platform'), (7, 'Infrastructure')], null=True)),
                ('system_type_display', models.CharField(editable=False, max_length=128, null=True)),
                ('vulnerability_docs', models.URLField(blank=True, help_text='URL to documentation related to known vulnerability reports', max_length=2048, null=True)),
                ('workaround', models.TextField(blank=True, help_text='Written procedure for users to work around an outage of this system')),
                ('recovery_docs', models.URLField(blank=True, help_text='URL to recovery procedure(s) in the event of system failure', max_length=2048, null=True)),
                ('mtd', models.DurationField(default=datetime.timedelta(14), help_text='Maximum Tolerable Downtime (days hh:mm:ss)')),
                ('rto', models.DurationField(default=datetime.timedelta(7), help_text='Recovery Time Objective (days hh:mm:ss)')),
                ('rpo', models.DurationField(default=datetime.timedelta(1), help_text='Recovery Point Objective/Data Loss Interval (days hh:mm:ss)')),
                ('contingency_plan', models.FileField(blank=True, max_length=255, null=True, upload_to='uploads/%Y/%m/%d')),
                ('contingency_plan_status', models.PositiveIntegerField(blank=True, choices=[(1, 'Draft'), (2, 'Released'), (3, 'Superseded')], null=True)),
                ('contingency_plan_last_tested', models.DateField(blank=True, help_text='Date that the plan was last tested.', null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('system_health', models.PositiveIntegerField(blank=True, choices=[(0, 'Healthy'), (1, 'Issues noted'), (2, 'At risk')], null=True)),
                ('system_creation_date', models.DateField(blank=True, help_text='Date that this system went into production.', null=True)),
                ('risks', registers.models.ChoiceArrayField(base_field=models.CharField(choices=[('0', 'IT System features not aligned to business processes'), ('1', 'IT System technology refresh lifecycle not safeguarded or future-proofed'), ('2', 'IT System data/information integrity and availability not aligned to business processes'), ('3', 'IT System emergency contingency and disaster recovery approach not well established'), ('4', 'IT System support arrangements not well established, value for money and/or safeguarded'), ('5', 'IT System roles and responsibilities not well established'), ('6', 'IT System solution design not aligned to department IT standards'), ('7', 'IT System change management does not consistently consider risk and security'), ('8', 'IT System incident and security management not triaged on business criticality'), ('9', 'IT System user training not well established')], max_length=256), blank=True, default=list, null=True, size=None, verbose_name='IT System risks')),
                ('backup_info', models.TextField(blank=True, help_text="Information about the backup/archiving of this system's data.", null=True, verbose_name='backup information')),
                ('critical_period', models.CharField(blank=True, help_text='Is there a period/season when this system is most important?', max_length=255, null=True)),
                ('alt_processing', models.TextField(blank=True, null=True, verbose_name='alternate processing procedure')),
                ('technical_recov', models.TextField(blank=True, null=True, verbose_name='technical recovery procedure')),
                ('post_recovery', models.TextField(blank=True, help_text='Functional testing and post recovery procedure.', null=True, verbose_name='post recovery procedure')),
                ('variation_iscp', models.TextField(blank=True, null=True, verbose_name='Variation to the ISCP')),
                ('user_notification', models.TextField(blank=True, help_text='List of users/stakeholders to contact regarding incidents', null=True)),
                ('function', registers.models.ChoiceArrayField(base_field=models.CharField(choices=[('0', 'Planning'), ('1', 'Operation'), ('2', 'Reporting')], max_length=256), blank=True, default=list, null=True, size=None, verbose_name='IT System function(s)')),
                ('use', registers.models.ChoiceArrayField(base_field=models.CharField(choices=[('0', 'Measurement'), ('1', 'Information'), ('2', 'Wisdom'), ('3', 'Data'), ('4', 'Knowledge'), ('5', 'Intelligence')], max_length=256), blank=True, default=list, null=True, size=None, verbose_name='IT System use(s)')),
                ('capability', registers.models.ChoiceArrayField(base_field=models.CharField(choices=[('0', 'Information lifecycle'), ('1', 'Communication and collaboration'), ('2', 'Automation and integration'), ('3', 'Security and risk management'), ('4', 'Intelligence and analytics')], max_length=256), blank=True, default=list, null=True, size=None, verbose_name='IT System capabilities')),
                ('unique_evidence', models.NullBooleanField(default=None, help_text='Is the digital content kept in this business system unique evidence of the official business of the Department?')),
                ('point_of_truth', models.NullBooleanField(default=None, help_text='Is the digital content kept in this business system a single point of truth?')),
                ('legal_need_to_retain', models.NullBooleanField(default=None, help_text='Is there a legal or compliance need to keep the digital content in this system?')),
                ('other_projects', models.TextField(blank=True, help_text='Details of related IT Systems and projects.', null=True)),
                ('sla', models.TextField(blank=True, help_text='Details of any Service Level Agreement that exists for this IT System (typically with an external vendor).', null=True, verbose_name='Service Level Agreement')),
                ('biller_code', models.CharField(blank=True, help_text='BPAY biller code for this IT System (must be unique).', max_length=64, null=True)),
                ('oim_internal_only', models.BooleanField(default=False, help_text='For OIM use only')),
                ('ah_support', models.ForeignKey(blank=True, help_text='After-hours support contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='ah_support', to='organisation.DepartmentUser', verbose_name='after hours support')),
                ('bh_support', models.ForeignKey(blank=True, help_text='Business hours support contact', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='bh_support', to='organisation.DepartmentUser', verbose_name='business hours support')),
                ('cost_centre', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.CostCentre')),
                ('custodian', models.ForeignKey(help_text='Application custodian', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_custodianed', to='organisation.DepartmentUser')),
                ('data_custodian', models.ForeignKey(blank=True, help_text='Application data custodian', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_data_custodianed', to='organisation.DepartmentUser')),
            ],
            options={
                'verbose_name': 'IT System',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='ITSystemDependency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criticality', models.PositiveIntegerField(choices=[(1, 'Critical'), (2, 'Moderate'), (3, 'Low')], help_text='How critical is the dependency?')),
                ('description', models.TextField(blank=True, help_text='Details of the dependency, its criticality, any workarounds, etc.', null=True)),
                ('dependency', models.ForeignKey(help_text='The system which is depended upon by the IT System', on_delete=django.db.models.deletion.PROTECT, related_name='dependency', to='registers.ITSystem')),
                ('itsystem', models.ForeignKey(help_text='The IT System', on_delete=django.db.models.deletion.PROTECT, to='registers.ITSystem', verbose_name='IT System')),
            ],
            options={
                'verbose_name_plural': 'IT System dependencies',
                'verbose_name': 'IT System dependency',
                'ordering': ('itsystem__name', 'criticality'),
            },
        ),
        migrations.CreateModel(
            name='ITSystemEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.PositiveSmallIntegerField(choices=[(1, 'Incident'), (2, 'Maintenance'), (3, 'Information')])),
                ('description', models.TextField()),
                ('planned', models.BooleanField(default=False, help_text='Was this event planned?')),
                ('start', models.DateTimeField(help_text='Event start (date & time)')),
                ('duration', models.DurationField(blank=True, help_text='Optional: duration of the event (hh:mm:ss).', null=True)),
                ('end', models.DateTimeField(blank=True, help_text='Optional: event end (date & time)', null=True)),
                ('current', models.BooleanField(default=True, editable=False)),
                ('it_systems', models.ManyToManyField(blank=True, help_text='IT System(s) affect by this event', to='registers.ITSystem')),
                ('locations', models.ManyToManyField(blank=True, help_text='Location(s) affect by this event', to='organisation.Location')),
            ],
            options={
                'verbose_name': 'IT System event',
            },
        ),
        migrations.CreateModel(
            name='ITSystemHardware',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'Application server'), (2, 'Database server'), (3, 'Network file storage'), (4, 'Reverse proxy'), (5, 'Shared workstation')])),
                ('production', models.BooleanField(default=False, help_text='Hardware is used by production IT system.')),
                ('decommissioned', models.BooleanField(default=False, help_text='Hardware has been decommissioned?')),
                ('description', models.TextField(blank=True)),
                ('patch_group', models.CharField(blank=True, help_text='Patch group that this host has been placed in.', max_length=256, null=True)),
                ('host', models.CharField(blank=True, help_text='Host, or hosting environment.', max_length=256, null=True)),
                ('computer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='tracking.Computer')),
            ],
            options={
                'verbose_name_plural': 'IT System hardware',
                'ordering': ('computer__hostname',),
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('db', 'Database'), ('dns', 'DNS'), ('email', 'Email'), ('idam', 'Identity & access management'), ('middle', 'Middleware'), ('phone', 'Phone system'), ('proxy', 'Reverse proxy'), ('storage', 'Storage'), ('vpn', 'VPN'), ('vm', 'Virtualisation'), ('web', 'Web server')], db_index=True, max_length=64)),
                ('name', models.CharField(max_length=512)),
            ],
            options={
                'ordering': ('category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='ProcessITSystemRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('importance', models.PositiveIntegerField(choices=[(1, 'High'), (2, 'Medium'), (3, 'Low')], help_text='How important is the IT System to undertaking this process?')),
                ('itsystem', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registers.ITSystem')),
                ('process', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='registers.BusinessProcess')),
            ],
            options={
                'verbose_name_plural': 'Process/IT System relationships',
            },
        ),
        migrations.CreateModel(
            name='UserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2048, unique=True)),
                ('user_count', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.AlterUniqueTogether(
            name='platform',
            unique_together={('category', 'name')},
        ),
        migrations.AddField(
            model_name='itsystem',
            name='hardwares',
            field=models.ManyToManyField(blank=True, help_text='Hardware that is used to provide this IT System', to='registers.ITSystemHardware', verbose_name='hardware'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='org_unit',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='organisation.OrgUnit'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='owner',
            field=models.ForeignKey(help_text='Application owner', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_owned', to='organisation.DepartmentUser'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='platforms',
            field=models.ManyToManyField(blank=True, to='registers.Platform'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='preferred_contact',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='systems_preferred_contact', to='organisation.DepartmentUser'),
        ),
        migrations.AddField(
            model_name='itsystem',
            name='user_groups',
            field=models.ManyToManyField(blank=True, help_text='User group(s) that use this IT System', to='registers.UserGroup'),
        ),
        migrations.AddField(
            model_name='businessfunction',
            name='services',
            field=models.ManyToManyField(to='registers.BusinessService'),
        ),
        migrations.AlterUniqueTogether(
            name='processitsystemrelationship',
            unique_together={('process', 'itsystem')},
        ),
        migrations.AlterUniqueTogether(
            name='itsystemhardware',
            unique_together={('computer', 'role')},
        ),
        migrations.AlterUniqueTogether(
            name='itsystemdependency',
            unique_together={('itsystem', 'dependency')},
        ),
    ]
